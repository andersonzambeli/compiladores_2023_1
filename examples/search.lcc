def linearsearch(int arr, int size, int val)
{
    int i;
    for (i = 0; i < size; i = i + 1)
    {
        if (arr[i] == val)
        {
            return 1;
        }
    }
    return 0;
}

def binarysearch1( int arr, int l, int r, int x)
{
    if (r >= l)
    { {  
        int mid;
        mid = l + (r - l) / 2;
        return mid;

    }}

    # When element is not present in array
    return -1;
}

def jump_search( int arr, int x, int n)
{
    int a;
    a = func sqrt(n);
    int step;
    int prev;
    step = func floor(a);
    prev = 0;

    
    if (arr[prev] == x)
    {
        return prev;
    }
    return -1;
}

# Naive Pattern Search algorithm (brute force way)
def naive_search(string str, string pattern)
{
    int len_str;
    int len_pat;
    len_str = func strlen(str);
    len_pat = func strlen(pattern);
    int t1;
    t = len_str - len_pat;
    int i;

    for (i = 0; i <= t ; i = i + 1)
    {
        int j;
        for (j = 0; j < len_pat; j=j+1)
        {
            if (str[i + j] != pattern[j])
            {
                break;
            }
        }
        if (j == len_pat)
        {
            print 'pattern is found at i';
        }
    }
}

def fib(int number)
{
    if (number == 1)
    {
        return 1;
    }
    else
    {
        if (number == 2)
        {
            return 1;
        }
        else
        {{
            int r;
            int t1;
            int t2;
            t1 = number - 1;
            t2 = number - 2;
            r = func fib(t1);
            t1 = func fib(t2);
            r = r + t1;
            return r;
        }}
   }
}

# Euclid's algorithm
def GCD(int x, int y)
{
    if (y == 0)
    {
        return x;
    }
    int t1;
    int t2;
    t2 = x % y;
    t = func GCD(y, t2);
    return t;
}

def isPrime(int x)
{
    if (x == 2)
    {
        return true;
    }
    if (x < 2)
    {
        return false;
    }
    if (x % 2 == 0)
    {
        return false;
    }
    int squareRoot;
    squareRoot = func sqrt(x);
    int i;

    for (i = 3; i <= squareRoot; i = i + 2)
    {
        if (x % i == 0)
        {
            return false;
        }
    }
    return true;
}
